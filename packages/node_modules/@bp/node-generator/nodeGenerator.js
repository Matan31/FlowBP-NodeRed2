const fs = require('fs');
const fsExtra = require('fs-extra')
const path = require('path');
let html = fs.readFileSync(path.join(__dirname, 'inOut.html.template'), 'utf8');
let js = fs.readFileSync(path.join(__dirname, 'inOut.js.template'), 'utf8');
let packageJson = fs.readFileSync(path.join(__dirname, 'package.json.template'), 'utf8');

function inOutNode(
  name,
  category,
  fields = [],
  icon = 'file.png',
  color = '#a6bbcf',
  help = '',
  style = '',
  numInput = 1,
  outputLabels = ['']) {

  let node = {
    name: titleCase(name),
    category: category,
    sanitizedName: sanitize(titleCase(name)),
    help: help,
    color: color,
    icon: icon,
    label: 'function () {\n' +
      '      updateColor(this.eventType , this.id);\n' +
      '      return this.name || "' + titleCase(name) + '";\n' +
      '    }',
    paletteLabel: titleCase(name),
    numInput: numInput,
    numOutput: outputLabels.length,
    outputLabels: '[' + outputLabels + ']',
    style: style,
    sharedConfiguration: '    <div class="form-row">\n' +
      '        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="node-red:common.label.name"></span></label>\n' +
      '        <input type="text" id="node-input-name" data-i18n="[placeholder]node-red:common.label.name">\n' +
      '    </div>\n\n' +
      '    <div class="form-row">\n' +
      '        <label for="node-input-eventType"><i class="fa fa-tasks"></i></label>\n' +
      '        <select id="node-input-eventType">\n' +
      '            <option value="request">Request this event</option>\n' +
      '            <option value="waitFor">Wait for this event</option>\n' +
      '            <option value="block">Block this event</option>\n' +
      '        </select>\n' +
      '    </div>'+
    '    <div class="form-row" hidden="hidden">\n' +
      '        <label for="node-input-internalFields" style="width:35%"><i class="fa fa-tasks"></i> Internal fields</label>\n' +
      '        <input type="text" id="node-input-internalFields">\n' +
      '    </div>',
    configuration: fields.map(f => {
      let str = '    <div class="form-row">\n';
      if (f.type === 'text') {
        str += '        <label for="node-input-' + f.name + '"><i class="fa fa-user"></i> ' + f.label + '</label>\n' +
          '        <input type="' + (f.type) + '" id="node-input-' + f.name + '" >\n';
      } else if (f.type === 'select') {
        str += '        <label for="node-input-service"><i class="fa fa-tasks"></i> ' + f.label + ':</label>\n' +
          '        <select id="node-input-service">\n' +
          '            <option value="select">Select</option>\n' +
          f.data.map(option => '            <option value="' + sanitize(option) + '">' + option + '</option>').join('\n') +
          '        </select>\n';
      } else {
        throw new Error('The field type ' + f.type + ' is unsupported.')
      }

      str += '    </div>';
      return str;
    }).join("\n"),
    defaults: createNodeFieldsAttribute(fields),
    package: '\t\t\t"' + name + '": "' + name + '.js",'
  }
  return node
}

function createNodeFieldsAttribute(fields) {
  if (fields.length === 0) return ''
  return fields.map(f => f.name + ': {value: "' + f.default + '", required: ' + f.required + '},').join('\n      ') +
    "\n      internalFields: {value: \"" + JSON.stringify(fields.map(f => {
      let obj = {
        name: f.name,
        type: f.type,
        defaultValue: f.default
      };
      if (f.type === 'select') {
        obj.options = {};
        f.data.forEach(option => obj.options[sanitize(option)] = option)
      }
      return obj
    })).replace(/"/g,'\\"') + "\"},"
}

function titleCase(str) {
  var splitStr = str.toLowerCase().split(/\s*[_ ]\s*/);
  for (var i = 0; i < splitStr.length; i++) {
    // You do not need to check if i is larger than splitStr length, as your for does that for you
    // Assign it back to the array
    splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);
  }
  // Directly return the joined string
  return splitStr.join(' ');
}

function sanitize(name) {
  return name.replace(/&/g, 'And').replace(/[_ \r\n]+/g, '')
}

function field(name, type = 'string', defaultValue = '', data = undefined, validation = undefined) {
  return {
    name: sanitize(titleCase(name)),
    label: titleCase(name),
    type: type,
    required: false,
    default: (type === 'select') ? 'select' : defaultValue,
    data: data,
    validation: validation,
  }
}

function createNode(node) {
  let regex = /{{([a-zA-Z]+)}}/g

  let newHtml = html.replace(regex, (match, p1, offset, string) => node[p1])
  let newJs = js.replace(regex, (match, p1, offset, string) => node[p1])

  fs.writeFileSync(path.join(__dirname, '..', 'nodes', 'generated', node.sanitizedName + '.html'), newHtml);
  fs.writeFileSync(path.join(__dirname, '..', 'nodes', 'generated', node.sanitizedName + '.js'), newJs);
}

function generatePackage(nodes) {
  let list = nodes.map(n => '\t\t\t"' + n.name + '": "' + n.sanitizedName + '.js"').join(',\n')
  let newPackage = packageJson.replace(/{{nodes}}/g, list);
  fs.writeFileSync(path.join(__dirname, '..', 'nodes', 'generated', 'package.json'), newPackage);
  fs.writeFileSync(path.join(__dirname, '..', 'nodes', 'generated', 'generated.js'), 'module.exports = false\n');
}

function generateNodes(inOutNodes) {
  fsExtra.emptyDirSync(path.join(__dirname, '..', 'nodes', 'generated'))
  generatePackage(inOutNodes);

  for (let n of inOutNodes) {
    createNode(n);
  }
}

const nodes = [
  inOutNode('start session', 'Web', [field('url', 'text')], "font-awesome/fa-plus-square-o"),
  inOutNode('end session','Web', [field('session_name', 'text')], "font-awesome/fa-minus-square-o"),

  inOutNode('login', 'Common Logic', [
    field('username', 'text'),
    field('password', 'text')
  ], "font-awesome/fa-sign-in"),


  //region Meet the banker
  inOutNode('set time', 'banker', [field('time', 'select', '', ["09:00", "09:15", "09:45", "12:00", "14:15", "16:00", "16:15", "18:00"])], "font-awesome/fa-calendar-times-o"),
  inOutNode('set branch', 'banker', [field('branch', 'select', '', ["517 - לב העיר", "0517 - שאול המלך", "94 - גרנד קניון"])], "font-awesome/fa-building-o"),
  inOutNode('contact & remarks', 'banker', [
    // field('id', 'text'),
    // field('name', 'text'),
    // field('surname', 'text'),
    field('phone', 'text', undefined, 'RED.validators.regex(/^05[\d-]{9/)'),
    field('remarks', 'text'),
  ], "font-awesome/fa-address-card-o"),
  inOutNode('approval', 'banker', [], "font-awesome/fa-check"),
  inOutNode('confirm', 'banker', [], "font-awesome/fa-thumbs-o-up"),
  inOutNode('send email', 'banker', [field('email', 'text'),field('title', 'text')], "font-awesome/fa-thumbs-o-up"),
  //endregion
];

// icons: https://fontawesome.com/v4.7/icons/

module.exports = function () {
  generateNodes(nodes);
}
// generateNodes(nodes);